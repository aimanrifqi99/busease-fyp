{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\BusEase\\\\admin\\\\src\\\\context\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\n// AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const navigate = useNavigate(); // Initialize user state from localStorage with safe parsing\n\n  const [user, setUser] = useState(() => {\n    if (typeof window !== 'undefined') {\n      // Check if window is available\n      const storedUser = localStorage.getItem('user');\n      return storedUser ? JSON.parse(storedUser) : null;\n    }\n\n    return null;\n  }); // Update localStorage whenever user changes\n\n  useEffect(() => {\n    if (user) {\n      localStorage.setItem('user', JSON.stringify(user));\n    } else {\n      localStorage.removeItem('user'); // Clear storage on logout\n    }\n  }, [user]);\n\n  const login = async credentials => {\n    try {\n      const {\n        data\n      } = await axios.post('/auth/login', credentials);\n\n      if (data.isAdmin) {\n        const userData = { ...data.details,\n          isAdmin: data.isAdmin,\n          token: data.token // Store the token\n\n        };\n        setUser(userData);\n        localStorage.setItem('user', JSON.stringify(userData));\n        navigate('/admin');\n      } else {\n        alert('Access restricted to admin users only');\n      }\n    } catch (err) {\n      alert('Login failed. Please check your credentials.');\n      console.error(err);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user'); // Remove user data from localStorage\n\n    navigate('/login');\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this);\n};\n\n_s(AuthProvider, \"OiDHVsabkF3Svfh2dEbOAtOHF0w=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/user/OneDrive/Desktop/BusEase/admin/src/context/AuthContext.js"],"names":["React","createContext","useState","useEffect","useNavigate","axios","AuthContext","AuthProvider","children","navigate","user","setUser","window","storedUser","localStorage","getItem","JSON","parse","setItem","stringify","removeItem","login","credentials","data","post","isAdmin","userData","details","token","alert","err","console","error","logout"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,EAAjC;AAEP,OAAO,MAAMM,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAMC,QAAQ,GAAGL,WAAW,EAA5B,CAD4C,CAG5C;;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,MAAM;AACnC,QAAI,OAAOU,MAAP,KAAkB,WAAtB,EAAmC;AAAG;AAClC,YAAMC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAnB;AACA,aAAOF,UAAU,GAAGG,IAAI,CAACC,KAAL,CAAWJ,UAAX,CAAH,GAA4B,IAA7C;AACH;;AACD,WAAO,IAAP;AACH,GAN+B,CAAhC,CAJ4C,CAY5C;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIO,IAAJ,EAAU;AACNI,MAAAA,YAAY,CAACI,OAAb,CAAqB,MAArB,EAA6BF,IAAI,CAACG,SAAL,CAAeT,IAAf,CAA7B;AACH,KAFD,MAEO;AACHI,MAAAA,YAAY,CAACM,UAAb,CAAwB,MAAxB,EADG,CAC+B;AACrC;AACJ,GANQ,EAMN,CAACV,IAAD,CANM,CAAT;;AAQA,QAAMW,KAAK,GAAG,MAAOC,WAAP,IAAuB;AACjC,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMlB,KAAK,CAACmB,IAAN,CAAW,aAAX,EAA0BF,WAA1B,CAAvB;;AAEA,UAAIC,IAAI,CAACE,OAAT,EAAkB;AAChB,cAAMC,QAAQ,GAAG,EACf,GAAGH,IAAI,CAACI,OADO;AAEfF,UAAAA,OAAO,EAAEF,IAAI,CAACE,OAFC;AAGfG,UAAAA,KAAK,EAAEL,IAAI,CAACK,KAHG,CAGI;;AAHJ,SAAjB;AAKAjB,QAAAA,OAAO,CAACe,QAAD,CAAP;AACAZ,QAAAA,YAAY,CAACI,OAAb,CAAqB,MAArB,EAA6BF,IAAI,CAACG,SAAL,CAAeO,QAAf,CAA7B;AACAjB,QAAAA,QAAQ,CAAC,QAAD,CAAR;AACD,OATD,MASO;AACLoB,QAAAA,KAAK,CAAC,uCAAD,CAAL;AACD;AACF,KAfD,CAeE,OAAOC,GAAP,EAAY;AACVD,MAAAA,KAAK,CAAC,8CAAD,CAAL;AACAE,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,GApBD;;AAsBA,QAAMG,MAAM,GAAG,MAAM;AACjBtB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAG,IAAAA,YAAY,CAACM,UAAb,CAAwB,MAAxB,EAFiB,CAEiB;;AAClCX,IAAAA,QAAQ,CAAC,QAAD,CAAR;AACH,GAJD;;AAMA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAF;AAAQW,MAAAA,KAAR;AAAeY,MAAAA;AAAf,KAA7B;AAAA,cACKzB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKD,CAtDM;;GAAMD,Y;UACMH,W;;;KADNG,Y","sourcesContent":["// AuthContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const navigate = useNavigate();\r\n\r\n  // Initialize user state from localStorage with safe parsing\r\n  const [user, setUser] = useState(() => {\r\n      if (typeof window !== 'undefined') {  // Check if window is available\r\n          const storedUser = localStorage.getItem('user');\r\n          return storedUser ? JSON.parse(storedUser) : null;\r\n      }\r\n      return null;\r\n  });\r\n\r\n  // Update localStorage whenever user changes\r\n  useEffect(() => {\r\n      if (user) {\r\n          localStorage.setItem('user', JSON.stringify(user));\r\n      } else {\r\n          localStorage.removeItem('user');  // Clear storage on logout\r\n      }\r\n  }, [user]);\r\n\r\n  const login = async (credentials) => {\r\n      try {\r\n        const { data } = await axios.post('/auth/login', credentials);\r\n\r\n        if (data.isAdmin) {\r\n          const userData = {\r\n            ...data.details,\r\n            isAdmin: data.isAdmin,\r\n            token: data.token, // Store the token\r\n          };\r\n          setUser(userData);\r\n          localStorage.setItem('user', JSON.stringify(userData));\r\n          navigate('/admin');\r\n        } else {\r\n          alert('Access restricted to admin users only');\r\n        }\r\n      } catch (err) {\r\n          alert('Login failed. Please check your credentials.');\r\n          console.error(err);\r\n      }\r\n  };\r\n\r\n  const logout = () => {\r\n      setUser(null);\r\n      localStorage.removeItem('user');  // Remove user data from localStorage\r\n      navigate('/login');\r\n  };\r\n\r\n  return (\r\n      <AuthContext.Provider value={{ user, login, logout }}>\r\n          {children}\r\n      </AuthContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}