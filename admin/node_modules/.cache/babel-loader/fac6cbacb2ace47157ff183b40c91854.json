{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst useFetch = initialUrl => {\n  _s();\n\n  const [data, setData] = useState([]); // Initialize with an empty array\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null); // Initialize error as null\n\n  const [url, setUrl] = useState(initialUrl); // Track the current URL\n\n  const fetchData = async fetchUrl => {\n    setLoading(true);\n    setError(null); // Reset error before fetching\n\n    try {\n      const res = await axios.get(fetchUrl);\n      setData(res.data); // Set the data returned from the API\n    } catch (err) {\n      setError(err); // Set error if fetch fails\n    } finally {\n      setLoading(false); // Ensure loading state is reset\n    }\n  }; // Fetch data when the URL changes\n\n\n  useEffect(() => {\n    fetchData(url);\n  }, [url]); // Depend on url, fetch data whenever it changes\n  // Function to refetch data with a new URL\n\n  const refetch = (origin, destination, date) => {\n    const newUrl = `/schedules/?origin=${origin}&destination=${destination}&departureDate=${date}`;\n    setUrl(newUrl); // Set the new URL, triggering a fetch\n  };\n\n  return {\n    data,\n    loading,\n    error,\n    refetch\n  };\n};\n\n_s(useFetch, \"jm+4egQ+njNPYLKJwwXWgh7+8xk=\");\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/user/OneDrive/Desktop/BusEase/admin/src/hooks/useFetch.js"],"names":["useEffect","useState","axios","useFetch","initialUrl","data","setData","loading","setLoading","error","setError","url","setUrl","fetchData","fetchUrl","res","get","err","refetch","origin","destination","date","newUrl"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAIC,UAAD,IAAgB;AAAA;;AAC/B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC,CAD+B,CACO;;AACtC,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC,CAH+B,CAGW;;AAC1C,QAAM,CAACU,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAACG,UAAD,CAA9B,CAJ+B,CAIa;;AAE5C,QAAMS,SAAS,GAAG,MAAOC,QAAP,IAAoB;AACpCN,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR,CAFoC,CAEpB;;AAChB,QAAI;AACF,YAAMK,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUF,QAAV,CAAlB;AACAR,MAAAA,OAAO,CAACS,GAAG,CAACV,IAAL,CAAP,CAFE,CAEiB;AACpB,KAHD,CAGE,OAAOY,GAAP,EAAY;AACZP,MAAAA,QAAQ,CAACO,GAAD,CAAR,CADY,CACG;AAChB,KALD,SAKU;AACRT,MAAAA,UAAU,CAAC,KAAD,CAAV,CADQ,CACW;AACpB;AACF,GAXD,CAN+B,CAmB/B;;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,SAAS,CAACF,GAAD,CAAT;AACD,GAFQ,EAEN,CAACA,GAAD,CAFM,CAAT,CApB+B,CAsBpB;AAEX;;AACA,QAAMO,OAAO,GAAG,CAACC,MAAD,EAASC,WAAT,EAAsBC,IAAtB,KAA+B;AAC7C,UAAMC,MAAM,GAAI,sBAAqBH,MAAO,gBAAeC,WAAY,kBAAiBC,IAAK,EAA7F;AACAT,IAAAA,MAAM,CAACU,MAAD,CAAN,CAF6C,CAE7B;AACjB,GAHD;;AAKA,SAAO;AAAEjB,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA,KAAjB;AAAwBS,IAAAA;AAAxB,GAAP;AACD,CA/BD;;GAAMf,Q;;AAiCN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst useFetch = (initialUrl) => {\r\n  const [data, setData] = useState([]); // Initialize with an empty array\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null); // Initialize error as null\r\n  const [url, setUrl] = useState(initialUrl); // Track the current URL\r\n\r\n  const fetchData = async (fetchUrl) => {\r\n    setLoading(true);\r\n    setError(null); // Reset error before fetching\r\n    try {\r\n      const res = await axios.get(fetchUrl);\r\n      setData(res.data); // Set the data returned from the API\r\n    } catch (err) {\r\n      setError(err); // Set error if fetch fails\r\n    } finally {\r\n      setLoading(false); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  // Fetch data when the URL changes\r\n  useEffect(() => {\r\n    fetchData(url);\r\n  }, [url]); // Depend on url, fetch data whenever it changes\r\n\r\n  // Function to refetch data with a new URL\r\n  const refetch = (origin, destination, date) => {\r\n    const newUrl = `/schedules/?origin=${origin}&destination=${destination}&departureDate=${date}`;\r\n    setUrl(newUrl); // Set the new URL, triggering a fetch\r\n  };\r\n\r\n  return { data, loading, error, refetch };\r\n};\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}