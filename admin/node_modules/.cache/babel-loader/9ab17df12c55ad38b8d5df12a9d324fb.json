{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\BusEase\\\\admin\\\\src\\\\context\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\n// AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const navigate = useNavigate();\n  const [user, setUser] = useState(() => {\n    const storedUser = localStorage.getItem('user');\n    return storedUser ? JSON.parse(storedUser) : null;\n  });\n\n  const login = async credentials => {\n    try {\n      const {\n        data\n      } = await axios.post('/api/auth/login', credentials);\n\n      if (data.isAdmin) {\n        setUser({ ...data.details,\n          isAdmin: data.isAdmin\n        });\n        localStorage.setItem('user', JSON.stringify({ ...data.details,\n          isAdmin: data.isAdmin\n        }));\n        localStorage.setItem('token', data.token); // Store the token\n\n        navigate('/admin');\n      } else {\n        alert('Access restricted to admin users only');\n      }\n    } catch (err) {\n      alert('Login failed. Please check your credentials.');\n      console.error(err);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token'); // Clear the token\n\n    navigate('/login');\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"4625MeIpXBXJOEoM7EJiDo4fZFE=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/user/OneDrive/Desktop/BusEase/admin/src/context/AuthContext.js"],"names":["React","createContext","useState","useEffect","useNavigate","axios","AuthContext","AuthProvider","children","navigate","user","setUser","storedUser","localStorage","getItem","JSON","parse","login","credentials","data","post","isAdmin","details","setItem","stringify","token","alert","err","console","error","logout","removeItem"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,EAAjC;AAEP,OAAO,MAAMM,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC1C,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,MAAM;AACnC,UAAMU,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAnB;AACA,WAAOF,UAAU,GAAGG,IAAI,CAACC,KAAL,CAAWJ,UAAX,CAAH,GAA4B,IAA7C;AACH,GAH+B,CAAhC;;AAKA,QAAMK,KAAK,GAAG,MAAOC,WAAP,IAAuB;AACjC,QAAI;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMd,KAAK,CAACe,IAAN,CAAW,iBAAX,EAA8BF,WAA9B,CAAvB;;AAEA,UAAIC,IAAI,CAACE,OAAT,EAAkB;AACdV,QAAAA,OAAO,CAAC,EAAE,GAAGQ,IAAI,CAACG,OAAV;AAAmBD,UAAAA,OAAO,EAAEF,IAAI,CAACE;AAAjC,SAAD,CAAP;AACAR,QAAAA,YAAY,CAACU,OAAb,CAAqB,MAArB,EAA6BR,IAAI,CAACS,SAAL,CAAe,EAAE,GAAGL,IAAI,CAACG,OAAV;AAAmBD,UAAAA,OAAO,EAAEF,IAAI,CAACE;AAAjC,SAAf,CAA7B;AACAR,QAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACM,KAAnC,EAHc,CAG8B;;AAC5ChB,QAAAA,QAAQ,CAAC,QAAD,CAAR;AACH,OALD,MAKO;AACHiB,QAAAA,KAAK,CAAC,uCAAD,CAAL;AACH;AACJ,KAXD,CAWE,OAAOC,GAAP,EAAY;AACVD,MAAAA,KAAK,CAAC,8CAAD,CAAL;AACAE,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,GAhBD;;AAkBA,QAAMG,MAAM,GAAG,MAAM;AACjBnB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,IAAAA,YAAY,CAACkB,UAAb,CAAwB,MAAxB;AACAlB,IAAAA,YAAY,CAACkB,UAAb,CAAwB,OAAxB,EAHiB,CAGiB;;AAClCtB,IAAAA,QAAQ,CAAC,QAAD,CAAR;AACH,GALD;;AAOA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAF;AAAQO,MAAAA,KAAR;AAAea,MAAAA;AAAf,KAA7B;AAAA,cACKtB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CArCM;;GAAMD,Y;UACQH,W;;;KADRG,Y","sourcesContent":["// AuthContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const navigate = useNavigate();\r\n    const [user, setUser] = useState(() => {\r\n        const storedUser = localStorage.getItem('user');\r\n        return storedUser ? JSON.parse(storedUser) : null;\r\n    });\r\n\r\n    const login = async (credentials) => {\r\n        try {\r\n            const { data } = await axios.post('/api/auth/login', credentials);\r\n\r\n            if (data.isAdmin) {\r\n                setUser({ ...data.details, isAdmin: data.isAdmin });\r\n                localStorage.setItem('user', JSON.stringify({ ...data.details, isAdmin: data.isAdmin }));\r\n                localStorage.setItem('token', data.token);  // Store the token\r\n                navigate('/admin');\r\n            } else {\r\n                alert('Access restricted to admin users only');\r\n            }\r\n        } catch (err) {\r\n            alert('Login failed. Please check your credentials.');\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        setUser(null);\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('token'); // Clear the token\r\n        navigate('/login');\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}