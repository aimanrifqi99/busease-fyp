{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\BusEase\\\\admin\\\\src\\\\context\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate();\n\n  const login = async credentials => {\n    try {\n      const {\n        data\n      } = await axios.post('/auth/login', credentials, {\n        withCredentials: true\n      });\n\n      if (data.isAdmin) {\n        setUser(data.details);\n        navigate('/admin'); // Redirect after successful login\n      } else {\n        alert('Access restricted to admin users only');\n      }\n    } catch (err) {\n      alert('Login failed. Please check your credentials.');\n      console.error(err);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    navigate('/login');\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"6IF8oi2v+FFFMVJXFQinFj68c40=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/user/OneDrive/Desktop/BusEase/admin/src/context/AuthContext.js"],"names":["React","createContext","useState","useEffect","useNavigate","axios","AuthContext","AuthProvider","children","user","setUser","navigate","login","credentials","data","post","withCredentials","isAdmin","details","alert","err","console","error","logout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,EAAjC;AAEP,OAAO,MAAMM,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC1C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAMS,QAAQ,GAAGP,WAAW,EAA5B;;AAEA,QAAMQ,KAAK,GAAG,MAAOC,WAAP,IAAuB;AACnC,QAAI;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMT,KAAK,CAACU,IAAN,CAAW,aAAX,EAA0BF,WAA1B,EAAuC;AAAEG,QAAAA,eAAe,EAAE;AAAnB,OAAvC,CAAvB;;AACA,UAAIF,IAAI,CAACG,OAAT,EAAkB;AACdP,QAAAA,OAAO,CAACI,IAAI,CAACI,OAAN,CAAP;AACAP,QAAAA,QAAQ,CAAC,QAAD,CAAR,CAFc,CAEM;AACvB,OAHD,MAGO;AACHQ,QAAAA,KAAK,CAAC,uCAAD,CAAL;AACH;AACJ,KARD,CAQE,OAAOC,GAAP,EAAY;AACVD,MAAAA,KAAK,CAAC,8CAAD,CAAL;AACAE,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,GAbC;;AAeA,QAAMG,MAAM,GAAG,MAAM;AACjBb,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAC,IAAAA,QAAQ,CAAC,QAAD,CAAR;AACH,GAHD;;AAKA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEF,MAAAA,IAAF;AAAQG,MAAAA,KAAR;AAAeW,MAAAA;AAAf,KAA7B;AAAA,cACKf;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA7BM;;GAAMD,Y;UAEQH,W;;;KAFRG,Y","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    const login = async (credentials) => {\r\n      try {\r\n          const { data } = await axios.post('/auth/login', credentials, { withCredentials: true });\r\n          if (data.isAdmin) {\r\n              setUser(data.details);\r\n              navigate('/admin'); // Redirect after successful login\r\n          } else {\r\n              alert('Access restricted to admin users only');\r\n          }\r\n      } catch (err) {\r\n          alert('Login failed. Please check your credentials.');\r\n          console.error(err);\r\n      }\r\n  };\r\n\r\n    const logout = () => {\r\n        setUser(null);\r\n        navigate('/login');\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}