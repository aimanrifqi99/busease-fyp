{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\BusEase\\\\admin\\\\src\\\\components\\\\UserManagement\\\\UserManagement.jsx\",\n    _s = $RefreshSig$();\n\n// src/pages/user/UserManagement.jsx\nimport React, { useEffect, useState } from 'react';\nimport { getUsers, deleteUser, updateUser, getUser } from '../../api/userApi';\nimport './UserManagement.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserManagement = () => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [editMode, setEditMode] = useState(false);\n  const [formData, setFormData] = useState({\n    username: '',\n    email: ''\n  });\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const {\n          data\n        } = await getUsers();\n        setUsers(data);\n      } catch (err) {\n        setError('Failed to fetch users');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  const handleEditClick = async id => {\n    try {\n      const {\n        data\n      } = await getUser(id);\n      setSelectedUser(data);\n      setFormData({\n        username: data.username,\n        email: data.email\n      });\n      setEditMode(true);\n    } catch (err) {\n      console.error('Failed to fetch user data:', err);\n      setError('Failed to fetch user data');\n    }\n  };\n\n  const handleFormChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({ ...formData,\n      [name]: value\n    });\n  };\n\n  const handleConfirmEdit = async () => {\n    try {\n      const {\n        data\n      } = await updateUser(selectedUser._id, formData);\n      setUsers(users.map(user => user._id === selectedUser._id ? data : user));\n      setEditMode(false);\n      setSelectedUser(null);\n    } catch (err) {\n      console.error('Failed to update user:', err);\n      setError('Failed to update user');\n    }\n  };\n\n  const handleDelete = async id => {\n    try {\n      await deleteUser(id);\n      setUsers(users.filter(user => user._id !== id));\n    } catch (err) {\n      console.error('Failed to delete user:', err);\n      setError('Failed to delete user');\n    }\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading users...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"userManagement\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"User Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), editMode ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editForm\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Edit User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Username:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        value: formData.username,\n        onChange: handleFormChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        value: formData.email,\n        onChange: handleFormChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConfirmEdit,\n        children: \"Confirm Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setEditMode(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"managementTable\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: users.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEditClick(user._id),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDelete(user._id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 33\n          }, this)]\n        }, user._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserManagement, \"EzpLh1nVPhObDvBQmfgQQbfPUHc=\");\n\n_c = UserManagement;\nexport default UserManagement;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserManagement\");","map":{"version":3,"sources":["C:/Users/user/OneDrive/Desktop/BusEase/admin/src/components/UserManagement/UserManagement.jsx"],"names":["React","useEffect","useState","getUsers","deleteUser","updateUser","getUser","UserManagement","users","setUsers","loading","setLoading","error","setError","selectedUser","setSelectedUser","editMode","setEditMode","formData","setFormData","username","email","fetchUsers","data","err","console","handleEditClick","id","handleFormChange","e","name","value","target","handleConfirmEdit","_id","map","user","handleDelete","filter"],"mappings":"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","sourcesContent":["// src/pages/user/UserManagement.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getUsers, deleteUser, updateUser, getUser } from '../../api/userApi';\r\nimport './UserManagement.css';\r\n\r\nconst UserManagement = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [formData, setFormData] = useState({\r\n        username: '',\r\n        email: '',\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            try {\r\n                const { data } = await getUsers();\r\n                setUsers(data);\r\n            } catch (err) {\r\n                setError('Failed to fetch users');\r\n                console.error(err);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    const handleEditClick = async (id) => {\r\n        try {\r\n            const { data } = await getUser(id);\r\n            setSelectedUser(data);\r\n            setFormData({ username: data.username, email: data.email });\r\n            setEditMode(true);\r\n        } catch (err) {\r\n            console.error('Failed to fetch user data:', err);\r\n            setError('Failed to fetch user data');\r\n        }\r\n    };\r\n\r\n    const handleFormChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({ ...formData, [name]: value });\r\n    };\r\n\r\n    const handleConfirmEdit = async () => {\r\n        try {\r\n            const { data } = await updateUser(selectedUser._id, formData);\r\n            setUsers(users.map(user => user._id === selectedUser._id ? data : user));\r\n            setEditMode(false);\r\n            setSelectedUser(null);\r\n        } catch (err) {\r\n            console.error('Failed to update user:', err);\r\n            setError('Failed to update user');\r\n        }\r\n    };\r\n\r\n    const handleDelete = async (id) => {\r\n        try {\r\n            await deleteUser(id);\r\n            setUsers(users.filter(user => user._id !== id));\r\n        } catch (err) {\r\n            console.error('Failed to delete user:', err);\r\n            setError('Failed to delete user');\r\n        }\r\n    };\r\n\r\n    if (loading) return <div>Loading users...</div>;\r\n    if (error) return <div>{error}</div>;\r\n\r\n    return (\r\n        <div className=\"userManagement\">\r\n            <h3>User Management</h3>\r\n            {editMode ? (\r\n                <div className=\"editForm\">\r\n                    <h4>Edit User</h4>\r\n                    <label>Username:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        value={formData.username}\r\n                        onChange={handleFormChange}\r\n                    />\r\n                    <label>Email:</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        value={formData.email}\r\n                        onChange={handleFormChange}\r\n                    />\r\n                    <button onClick={handleConfirmEdit}>Confirm Edit</button>\r\n                    <button onClick={() => setEditMode(false)}>Cancel</button>\r\n                </div>\r\n            ) : (\r\n                <table className=\"managementTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Username</th>\r\n                            <th>Email</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {users.map(user => (\r\n                            <tr key={user._id}>\r\n                                <td>{user.username}</td>\r\n                                <td>{user.email}</td>\r\n                                <td>\r\n                                    <button onClick={() => handleEditClick(user._id)}>Edit</button>\r\n                                    <button onClick={() => handleDelete(user._id)}>Delete</button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserManagement;\r\n"]},"metadata":{},"sourceType":"module"}